start = x:expression { return x; }

validchar = [A-Z$]

spacedatom = " "* x:atom " "* { return x; }

atom = chars:validchar+ { return chars.join(""); }

expression = x:spacedatom+ {
		let uniq = (t) => {return t.reduce( (p,c) => { if (p.indexOf(c) < 0) p.push(c); return p;}, [])}
        let arrayeqstr = String((x,y) => { return x.length === y.length && x.every( (v,i) => { return v === y[i]; }) });
        var uniqvals = uniq(x);
        var uniqfnstr = String(uniq);

        var numberedVals = x.map( (v, i) => { return v + "_" + i; });
        var uniqNumberedVals = [];
        var getbase = (v) => { return v.replace(/_\d+/, ""); }
        numberedVals.forEach( (v) => {
        	var baseval = getbase(v);
            if (uniqNumberedVals.map( (x) => { return getbase(x); }).indexOf(baseval) < 0) {
             uniqNumberedVals.push(v);
            }
        });
		return {
		    'funcstr': `((${numberedVals}) => { \n if([${numberedVals}].some( (v) => { return v === undefined;})) return []; \n let arrayeq = ${arrayeqstr}; \n let f = (${uniqvals}) => {return [${x}]} ; \n let u = ${uniqfnstr};\n if(arrayeq(f(${uniqNumberedVals}), [${numberedVals}]) && (f.length === u([${numberedVals}]).length)) { return [${numberedVals}]; } else { return []; } \n})`
		 };
    }